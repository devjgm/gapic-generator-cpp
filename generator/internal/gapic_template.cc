// Copyright 2019 Google Inc.  All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <memory>

#include "gapic_template.h"

namespace google {
namespace api {
namespace codegen {
namespace internal {

constexpr char kIncludeTemplate[] = R"(
#include $include$)";

constexpr char kNamespaceAliasTemplate[] = R"(
namespace $namespace_alias$ = $namespace$;)";

constexpr char kNamespaceStartTemplate[] = R"(
namespace $namespace$ {)";

constexpr char kNamespaceEndTemplate[] = R"(
} // namespace $namespace$)";

constexpr char kHeaderFileStartTemplate[] =
R"(// Generated by the GAPIC C++ plugin.
// If you make any local changes, they will be lost.
// source: $proto_file_name$)";

constexpr char kHeaderGuardStartTemplate[] = R"(
#ifndef $header_include_guard_const$
#define $header_include_guard_const$)";

constexpr char kHeaderKnownIncludesTemplate[] = "";

constexpr char kHeaderPreClientTemplate[] = "";

constexpr char kHeaderClientStartTemplate[] = R"(
$class_comment_block$
class $class_name$ {)";

constexpr char kHeaderClientPublicTemplate[] = "";
constexpr char kHeaderClientPublicMethodTemplate[] = "";

constexpr char kHeaderClientProtectedTemplate[] = "";
constexpr char kHeaderClientProtectedMethodTemplate[] = "";

constexpr char kHeaderClientPrivateTemplate[] = "";
constexpr char kHeaderClientPrivateMethodTemplate[] = "";

constexpr char kHeaderClientEndTemplate[] = R"(
}; // $class_name$)";

constexpr char kHeaderPostClientTemplate[] = "";

constexpr char kHeaderGuardEndTemplate[] = R"(
#endif // $header_include_guard_const$
)";

constexpr char kHeaderFileEndTemplate[] = "";

class DefaultGapicTemplate : public GapicTemplate {
 public:
  const char* include() const { return kIncludeTemplate; }
  const char* namespaceAlias() const { return kNamespaceAliasTemplate; }
  const char* namespaceStart() const { return kNamespaceStartTemplate; }
  const char* namespaceEnd() const { return kNamespaceEndTemplate; }

  const char* headerFileStart() const { return kHeaderFileStartTemplate; }
  const char* headerFileEnd() const { return kHeaderFileEndTemplate; }
  const char* headerGuardStart() const { return kHeaderGuardStartTemplate; }
  const char* headerGuardEnd() const { return kHeaderGuardEndTemplate; }
  const char* headerKnownIncludes() const { return kHeaderKnownIncludesTemplate; }
  const char* headerPreClient() const { return kHeaderPreClientTemplate; }
  const char* headerPostClient() const { return kHeaderPostClientTemplate; }
  const char* headerClientStart() const { return kHeaderClientStartTemplate; }
  const char* headerClientEnd() const { return kHeaderClientEndTemplate; }
  const char* headerClientPublic() const { return kHeaderClientPublicTemplate; }
  const char* headerClientPublicMethod() const { return kHeaderClientPublicMethodTemplate; }
  const char* headerClientProtected() const { return kHeaderClientProtectedTemplate; }
  const char* headerClientProtectedMethod() const { return kHeaderClientProtectedMethodTemplate; }
  const char* headerClientPrivate() const { return kHeaderClientPrivateTemplate; }
  const char* headerClientPrivateMethod() const { return kHeaderClientPrivateMethodTemplate; }
};

std::shared_ptr<GapicTemplate> CreateDefaultGapicTemplate() {
  return std::make_shared<DefaultGapicTemplate>();
}

} // namespace internal
} // namespace codegen
} // namespace api
} // namespace google

